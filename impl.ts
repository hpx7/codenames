import { Methods } from "./.rtag/methods";
import {
  PlayerData,
  ICreateGameRequest,
  IJoinGameRequest,
  IStartGameRequest,
  IGiveClueRequest,
  ISelectCardRequest,
  IEndTurnRequest,
  PlayerState,
  Card,
  Color,
  PlayerInfo,
  PlayerName,
  GameStatus,
} from "./.rtag/types";

interface InternalState {
  players: PlayerInfo[];
  cards: Card[];
  currentTurn: Color;
}

export class Impl implements Methods<InternalState> {
  createGame(userData: PlayerData, request: ICreateGameRequest): InternalState {
    return {
      players: [createPlayer(userData.playerName)],
      cards: [],
      currentTurn: Color.RED,
    };
  }
  joinGame(state: InternalState, userData: PlayerData, request: IJoinGameRequest): string | void {
    if (state.cards.length > 0) {
      return "Game already started";
    }
    if (state.players.find((player) => player.name == userData.playerName)) {
      return "Already joined";
    }
    state.players.push(createPlayer(userData.playerName));
  }
  startGame(state: InternalState, userData: PlayerData, request: IStartGameRequest): string | void {
    if (state.cards.length > 0) {
      return "Game already started";
    }
    // set up cards
    const shuffledList = shuffle(wordList);
    state.cards.push(...chooseCards(shuffledList, 9, Color.RED));
    state.cards.push(...chooseCards(shuffledList, 8, Color.BLUE));
    state.cards.push(...chooseCards(shuffledList, 7, Color.YELLOW));
    state.cards.push(...chooseCards(shuffledList, 1, Color.BLACK));
    state.cards = shuffle(state.cards);

    // set up teams
    state.players = shuffle(state.players);
    for (let i = 0; i < state.players.length; i++) {
      if (i < state.players.length / 2) {
        state.players[i].team = Color.RED;
      } else {
        state.players[i].team = Color.BLUE;
      }
    }

    // choose spymaster
    state.players[0].isSpymaster = true;
    state.players[state.players.length - 1].isSpymaster = true;
  }
  giveClue(state: InternalState, userData: PlayerData, request: IGiveClueRequest): string | void {
    throw new Error("Method not implemented.");
  }
  selectCard(state: InternalState, userData: PlayerData, request: ISelectCardRequest): string | void {
    if (getGameStatus(state.cards) != GameStatus.IN_PROGRESS) {
      return "Game is over";
    }
    const player = state.players.find((player) => player.name == userData.playerName)!;
    if (player.isSpymaster) {
      return "Spymaster cannot select card";
    }
    if (player.team != state.currentTurn) {
      return "Not your turn";
    }
    const selectedCard = state.cards.find((card) => card.word == request.word);
    if (selectedCard == undefined) {
      return "Invalid card selection";
    }
    if (selectedCard.selectedBy != undefined) {
      return "Card already selected";
    }
    selectedCard.selectedBy = player.team;
    if (selectedCard.color != state.currentTurn) {
      state.currentTurn = nextTurn(state.currentTurn);
    }
  }
  endTurn(state: InternalState, userData: PlayerData, request: IEndTurnRequest): string | void {
    if (getGameStatus(state.cards) != GameStatus.IN_PROGRESS) {
      return "Game is over";
    }
    const player = state.players.find((player) => player.name == userData.playerName)!;
    if (player.isSpymaster) {
      return "Spymaster cannot end turn";
    }
    if (player.team != state.currentTurn) {
      return "Not your turn";
    }
    state.currentTurn = nextTurn(state.currentTurn);
  }
  getUserState(state: InternalState, userData: PlayerData): PlayerState {
    const player = state.players.find((player) => player.name == userData.playerName);
    return {
      players: state.players,
      cards: player?.isSpymaster ? state.cards : state.cards.map(sanitizeCard),
      currentTurn: state.currentTurn,
      gameStatus: getGameStatus(state.cards),
    };
  }
}

function nextTurn(turn: Color): Color {
  return turn == Color.BLUE ? Color.RED : Color.BLUE;
}

function createPlayer(name: PlayerName) {
  return { name: name, team: Color.YELLOW, isSpymaster: false };
}

function shuffle<T>(items: T[]) {
  const shuffled = [...items];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

function chooseCards(words: string[], num: number, color: Color) {
  const cards = [];
  for (let i = 0; i < num; i++) {
    cards.push({ word: words.pop()!, color });
  }
  return cards;
}

function sanitizeCard(card: Card): Card {
  return card.selectedBy != undefined ? card : { ...card, color: undefined };
}

function getGameStatus(cards: Card[]): GameStatus {
  const blackCard = cards.find((card) => card.color == Color.BLACK);
  if (blackCard != undefined) {
    if (blackCard.selectedBy != undefined) {
      return blackCard.selectedBy == Color.BLUE ? GameStatus.RED_WON : GameStatus.BLUE_WON;
    } else if (remainingCards(cards, Color.BLUE) == 0) {
      return GameStatus.BLUE_WON;
    } else if (remainingCards(cards, Color.RED) == 0) {
      return GameStatus.RED_WON;
    }
  }
  return GameStatus.IN_PROGRESS;
}

function remainingCards(cards: Card[], color: Color): number {
  return cards.filter((card) => card.selectedBy == undefined && card.color == color).length;
}

const wordList = [
  "Acne",
  "Acre",
  "Addendum",
  "Advertise",
  "Aircraft",
  "Aisle",
  "Alligator",
  "Alphabetize",
  "America",
  "Ankle",
  "Apathy",
  "Applause",
  "Applesauc",
  "Application",
  "Archaeologist",
  "Aristocrat",
  "Arm",
  "Armada",
  "Asleep",
  "Astronaut",
  "Athlete",
  "Atlantis",
  "Aunt",
  "Avocado",
  "Backbone",
  "Bag",
  "Baguette",
  "Bald",
  "Balloon",
  "Banana",
  "Banister",
  "Baseball",
  "Baseboards",
  "Basketball",
  "Bat",
  "Battery",
  "Beach",
  "Beanstalk",
  "Bedbug",
  "Beer",
  "Beethoven",
  "Belt",
  "Bib",
  "Bicycle",
  "Big",
  "Bike",
  "Billboard",
  "Bird",
  "Birthday",
  "Bite",
  "Blacksmith",
  "Blanket",
  "Bleach",
  "Blimp",
  "Blossom",
  "Blueprint",
  "Blunt",
  "Blur",
  "Boa",
  "Boat",
  "Bob",
  "Bobsled",
  "Body",
  "Bomb",
  "Bonnet",
  "Book",
  "Booth",
  "Bowtie",
  "Box",
  "Boy",
  "Brainstorm",
  "Brand",
  "Brave",
  "Bride",
  "Bridge",
  "Broccoli",
  "Broken",
  "Broom",
  "Bruise",
  "Brunette",
  "Bubble",
  "Buddy",
  "Buffalo",
  "Bulb",
  "Bunny",
  "Bus",
  "Buy",
  "Cabin",
  "Cafeteria",
  "Cake",
  "Calculator",
  "Campsite",
  "Can",
  "Canada",
  "Candle",
  "Candy",
  "Cape",
  "Capitalism",
  "Car",
  "Cardboard",
  "Cartography",
  "Cat",
  "Cd",
  "Ceiling",
  "Cell",
  "Century",
  "Chair",
  "Chalk",
  "Champion",
  "Charger",
  "Cheerleader",
  "Chef",
  "Chess",
  "Chew",
  "Chicken",
  "Chime",
  "China",
  "Chocolate",
  "Church",
  "Circus",
  "Clay",
  "Cliff",
  "Cloak",
  "Clockwork",
  "Clown",
  "Clue",
  "Coach",
  "Coal",
  "Coaster",
  "Cog",
  "Cold",
  "College",
  "Comfort",
  "Computer",
  "Cone",
  "Constrictor",
  "Continuum",
  "Conversation",
  "Cook",
  "Coop",
  "Cord",
  "Corduroy",
  "Cot",
  "Cough",
  "Cow",
  "Cowboy",
  "Crayon",
  "Cream",
  "Crisp",
  "Criticize",
  "Crow",
  "Cruise",
  "Crumb",
  "Crust",
  "Cuff",
  "Curtain",
  "Cuticle",
  "Czar",
  "Dad",
  "Dart",
  "Dawn",
  "Day",
  "Deep",
  "Defect",
  "Dent",
  "Dentist",
  "Desk",
  "Dictionary",
  "Dimple",
  "Dirty",
  "Dismantle",
  "Ditch",
  "Diver",
  "Doctor",
  "Dog",
  "Doghouse",
  "Doll",
  "Dominoes",
  "Door",
  "Dot",
  "Drain",
  "Draw",
  "Dream",
  "Dress",
  "Drink",
  "Drip",
  "Drums",
  "Dryer",
  "Duck",
  "Dump",
  "Dunk",
  "Dust",
  "Ear",
  "Eat",
  "Ebony",
  "Elbow",
  "Electricity",
  "Elephant",
  "Elevator",
  "Elf",
  "Elm",
  "Engine",
  "England",
  "Ergonomic",
  "Escalator",
  "Eureka",
  "Europe",
  "Evolution",
  "Extension",
  "Eyebrow",
  "Fan",
  "Fancy",
  "Fast",
  "Feast",
  "Fence",
  "Feudalism",
  "Fiddle",
  "Figment",
  "Finger",
  "Fire",
  "First",
  "Fishing",
  "Fix",
  "Fizz",
  "Flagpole",
  "Flannel",
  "Flashlight",
  "Flock",
  "Flotsam",
  "Flower",
  "Flu",
  "Flush",
  "Flutter",
  "Fog",
  "Foil",
  "Football",
  "Forehead",
  "Forever",
  "Fortnight",
  "France",
  "Freckle",
  "Freight",
  "Fringe",
  "Frog",
  "Frown",
  "Gallop",
  "Game",
  "Garbage",
  "Garden",
  "Gasoline",
  "Gem",
  "Ginger",
  "Gingerbread",
  "Girl",
  "Glasses",
  "Goblin",
  "Gold",
  "Goodbye",
  "Grandpa",
  "Grape",
  "Grass",
  "Gratitude",
  "Gray",
  "Green",
  "Guitar",
  "Gum",
  "Gumball",
  "Hair",
  "Half",
  "Handle",
  "Handwriting",
  "Hang",
  "Happy",
  "Hat",
  "Hatch",
  "Headache",
  "Heart",
  "Hedge",
  "Helicopter",
  "Hem",
  "Hide",
  "Hill",
  "Hockey",
  "Homework",
  "Honk",
  "Hopscotch",
  "Horse",
  "Hose",
  "Hot",
  "House",
  "Houseboat",
  "Hug",
  "Humidifier",
  "Hungry",
  "Hurdle",
  "Hurt",
  "Hut",
  "Ice",
  "Implode",
  "Inn",
  "Inquisition",
  "Intern",
  "Internet",
  "Invitation",
  "Ironic",
  "Ivory",
  "Ivy",
  "Jade",
  "Japan",
  "Jeans",
  "Jelly",
  "Jet",
  "Jig",
  "Jog",
  "Journal",
  "Jump",
  "Key",
  "Killer",
  "Kilogram",
  "King",
  "Kitchen",
  "Kite",
  "Knee",
  "Kneel",
  "Knife",
  "Knight",
  "Koala",
  "Lace",
  "Ladder",
  "Ladybug",
  "Lag",
  "Landfill",
  "Lap",
  "Laugh",
  "Laundry",
  "Law",
  "Lawn",
  "Lawnmower",
  "Leak",
  "Leg",
  "Letter",
  "Level",
  "Lifestyle",
  "Ligament",
  "Light",
  "Lightsaber",
  "Lime",
  "Lion",
  "Lizard",
  "Log",
  "Loiterer",
  "Lollipop",
  "Loveseat",
  "Loyalty",
  "Lunch",
  "Lunchbox",
  "Lyrics",
  "Machine",
  "Macho",
  "Mailbox",
  "Mammoth",
  "Mark",
  "Mars",
  "Mascot",
  "Mast",
  "Matchstick",
  "Mate",
  "Mattress",
  "Mess",
  "Mexico",
  "Midsummer",
  "Mine",
  "Mistake",
  "Modern",
  "Mold",
  "Mom",
  "Monday",
  "Money",
  "Monitor",
  "Monster",
  "Mooch",
  "Moon",
  "Mop",
  "Moth",
  "Motorcycle",
  "Mountain",
  "Mouse",
  "Mower",
  "Mud",
  "Music",
  "Mute",
  "Nature",
  "Negotiate",
  "Neighbor",
  "Nest",
  "Neutron",
  "Niece",
  "Night",
  "Nightmare",
  "Nose",
  "Oar",
  "Observatory",
  "Office",
  "Oil",
  "Old",
  "Olympian",
  "Opaque",
  "Opener",
  "Orbit",
  "Organ",
  "Organize",
  "Outer",
  "Outside",
  "Ovation",
  "Overture",
  "Pail",
  "Paint",
  "Pajamas",
  "Palace",
  "Pants",
  "Paper",
  "Paper",
  "Park",
  "Parody",
  "Party",
  "Password",
  "Pastry",
  "Pawn",
  "Pear",
  "Pen",
  "Pencil",
  "Pendulum",
  "Penis",
  "Penny",
  "Pepper",
  "Personal",
  "Philosopher",
  "Phone",
  "Photograph",
  "Piano",
  "Picnic",
  "Pigpen",
  "Pillow",
  "Pilot",
  "Pinch",
  "Ping",
  "Pinwheel",
  "Pirate",
  "Plaid",
  "Plan",
  "Plank",
  "Plate",
  "Platypus",
  "Playground",
  "Plow",
  "Plumber",
  "Pocket",
  "Poem",
  "Point",
  "Pole",
  "Pomp",
  "Pong",
  "Pool",
  "Popsicle",
  "Population",
  "Portfolio",
  "Positive",
  "Post",
  "Princess",
  "Procrastinate",
  "Protestant",
  "Psychologist",
  "Publisher",
  "Punk",
  "Puppet",
  "Puppy",
  "Push",
  "Puzzle",
  "Quarantine",
  "Queen",
  "Quicksand",
  "Quiet",
  "Race",
  "Radio",
  "Raft",
  "Rag",
  "Rainbow",
  "Rainwater",
  "Random",
  "Ray",
  "Recycle",
  "Red",
  "Regret",
  "Reimbursement",
  "Retaliate",
  "Rib",
  "Riddle",
  "Rim",
  "Rink",
  "Roller",
  "Room",
  "Rose",
  "Round",
  "Roundabout",
  "Rung",
  "Runt",
  "Rut",
  "Sad",
  "Safe",
  "Salmon",
  "Salt",
  "Sandbox",
  "Sandcastle",
  "Sandwich",
  "Sash",
  "Satellite",
  "Scar",
  "Scared",
  "School",
  "Scoundrel",
  "Scramble",
  "Scuff",
  "Seashell",
  "Season",
  "Sentence",
  "Sequins",
  "Set",
  "Shaft",
  "Shallow",
  "Shampoo",
  "Shark",
  "Sheep",
  "Sheets",
  "Sheriff",
  "Shipwreck",
  "Shirt",
  "Shoelace",
  "Short",
  "Shower",
  "Shrink",
  "Sick",
  "Siesta",
  "Silhouette",
  "Singer",
  "Sip",
  "Skate",
  "Skating",
  "Ski",
  "Slam",
  "Sleep",
  "Sling",
  "Slow",
  "Slump",
  "Smith",
  "Sneeze",
  "Snow",
  "Snuggle",
  "Song",
  "Space",
  "Spare",
  "Speakers",
  "Spider",
  "Spit",
  "Sponge",
  "Spool",
  "Spoon",
  "Spring",
  "Sprinkler",
  "Spy",
  "Square",
  "Squint",
  "Stairs",
  "Standing",
  "Star",
  "State",
  "Stick",
  "Stockholder",
  "Stoplight",
  "Stout",
  "Stove",
  "Stowaway",
  "Straw",
  "Stream",
  "Streamline",
  "Stripe",
  "Student",
  "Sun",
  "Sunburn",
  "Sushi",
  "Swamp",
  "Swarm",
  "Sweater",
  "Swimming",
  "Swing",
  "Tachometer",
  "Talk",
  "Taxi",
  "Teacher",
  "Teapot",
  "Teenager",
  "Telephone",
  "Ten",
  "Tennis",
  "Thief",
  "Think",
  "Throne",
  "Through",
  "Thunder",
  "Tide",
  "Tiger",
  "Time",
  "Tinting",
  "Tiptoe",
  "Tiptop",
  "Tired",
  "Tissue",
  "Toast",
  "Toilet",
  "Tool",
  "Toothbrush",
  "Tornado",
  "Tournament",
  "Tractor",
  "Train",
  "Trash",
  "Treasure",
  "Tree",
  "Triangle",
  "Trip",
  "Truck",
  "Tub",
  "Tuba",
  "Tutor",
  "Television",
  "Twang",
  "Twig",
  "Twitterpated",
  "Type",
  "Unemployed",
  "Upgrade",
  "Vest",
  "Vision",
  "Wag",
  "Water",
  "Watermelon",
  "Wax",
  "Wedding",
  "Weed",
  "Welder",
  "Whatever",
  "Wheelchair",
  "Whiplash",
  "Whisk",
  "Whistle",
  "White",
  "Wig",
  "Will",
  "Windmill",
  "Winter",
  "Wish",
  "Wolf",
  "Wool",
  "World",
  "Worm",
  "Wristwatch",
  "Yardstick",
  "Zamboni",
  "Zen",
  "Zero",
  "Zipper",
  "Zone",
  "Zoo",
];
